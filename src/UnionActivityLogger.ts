import { Client, TextChannel, EmbedBuilder, ColorResolvable } from 'discord.js';
import { UnionActivityListener, UnionJoinInfo, UnionLeaveInfo, UnionRankChangeInfo } from './types'; // Adjust path if interface is elsewhere
import { MonitoredUnionService } from './MonitoredUnionService';

export class UnionActivityLogger implements UnionActivityListener {
    private client: Client;
    private logChannelId: string | null = null;
    private monitoredUnionService: MonitoredUnionService;

    // Define colors for different events
    private readonly JOIN_COLOR: ColorResolvable = '#3498DB';       // Blue
    private readonly LEAVE_COLOR: ColorResolvable = '#E67E22';      // Orange
    private readonly RANK_CHANGE_COLOR: ColorResolvable = '#9B59B6'; // Purple

    constructor(client: Client, monitoredUnionService: MonitoredUnionService) {
        this.client = client;
        this.monitoredUnionService = monitoredUnionService;
    }

    public setLogChannel(channelId: string): boolean {
        const channel = this.client.channels.cache.get(channelId);
        if (channel && channel.isTextBased()) {
            this.logChannelId = channelId;
            console.log(`[UnionActivityLogger] Log channel set to: ${channelId}`);
            // Optional: Send a confirmation message to the channel
            // (channel as TextChannel).send('Union activity logging has been configured for this channel.').catch(console.error);
            return true;
        }
        console.warn(`[UnionActivityLogger] Failed to set log channel: ${channelId} is not a valid text channel or not found.`);
        return false;
    }

    private async sendMessage(embed: EmbedBuilder): Promise<void> {
        if (!this.logChannelId) {
            // console.warn("[UnionActivityLogger] Log channel ID not set. Skipping message.");
            return;
        }
        try {
            const channel = await this.client.channels.fetch(this.logChannelId);
            if (channel instanceof TextChannel) {
                await channel.send({ embeds: [embed] });
            } else {
                console.error(`[UnionActivityLogger] Log channel ${this.logChannelId} found, but it's not a TextChannel.`);
            }
        } catch (error) {
            console.error(`[UnionActivityLogger] Failed to fetch or send message to channel ${this.logChannelId}:`, error);
        }
    }

    onUnionJoin(data: UnionJoinInfo): void {
        const embed = new EmbedBuilder()
            .setColor(this.JOIN_COLOR)
            .setTitle('ËÅØÁõüÊàêÂì°Âä†ÂÖ•')
            .setDescription(`‚úÖ **${data.userName}** (ID: \`${data.userId}\`) Âä†ÂÖ•‰∫ÜËÅØÁõü **${data.unionName}** (ID: \`${data.unionId}\`).`)
            .addFields({ name: 'ËÅ∑‰Ωç', value: data.newTitle || 'ÊàêÂì°' })
            .setTimestamp();
        this.sendMessage(embed);

        // Log to monitored unions if applicable
        if (this.monitoredUnionService.isMonitored(data.unionId)) {
            const monitoredDetails = `Áé©ÂÆ∂ **${data.userName}** (ID: \`${data.userId}\`) Âä†ÂÖ•ÔºåÊñ∞ËÅ∑‰ΩçÔºö${data.newTitle || 'ÊàêÂì°'}`;
            this.monitoredUnionService.dispatchActivityEvent(
                data.unionId,
                data.unionName,
                'Âä†ÂÖ•',
                monitoredDetails,
                new Date()
            )
        }
    }

    onUnionLeave(data: UnionLeaveInfo): void {
        const embed = new EmbedBuilder()
            .setColor(this.LEAVE_COLOR)
            .setTitle('ËÅØÁõüÊàêÂì°Èõ¢Èñã')
            .setDescription(`‚ùå **${data.userName}** (ID: \`${data.userId}\`) Èõ¢Èñã‰∫ÜËÅØÁõü **${data.unionName}** (ID: \`${data.unionId}\`).`)
            .addFields({ name: 'ÂéüËÅ∑‰Ωç', value: data.oldTitle || 'ÊàêÂì°' })
            .setTimestamp();
        this.sendMessage(embed);

        // Log to monitored unions if applicable
        if (this.monitoredUnionService.isMonitored(data.unionId)) {
            const monitoredDetails = `Áé©ÂÆ∂ **${data.userName}** (ID: \`${data.userId}\`) Èõ¢ÈñãÔºåÂéüËÅ∑‰ΩçÔºö${data.oldTitle || 'ÊàêÂì°'}`;
            this.monitoredUnionService.dispatchActivityEvent(
                data.unionId,
                data.unionName,
                'Èõ¢Èñã',
                monitoredDetails,
                new Date()
            )
        }
    }

    onUnionRankChange(data: UnionRankChangeInfo): void {
        const embed = new EmbedBuilder()
            .setColor(this.RANK_CHANGE_COLOR)
            .setTitle('ËÅØÁõüÊàêÂì°ËÅ∑‰ΩçËÆäÂãï')
            .setDescription(`üîÑ **${data.userName}** (ID: \`${data.userId}\`) Âú®ËÅØÁõü **${data.unionName}** (ID: \`${data.unionId}\`) ÁöÑËÅ∑‰ΩçÁôºÁîü‰∫ÜËÆäÂåñ„ÄÇ`)
            .addFields(
                { name: 'ÂéüËÅ∑‰Ωç', value: data.oldTitle || 'ÊàêÂì°', inline: true },
                { name: 'Êñ∞ËÅ∑‰Ωç', value: data.newTitle || 'ÊàêÂì°', inline: true }
            )
            .setTimestamp();
        this.sendMessage(embed);

        // Log to monitored unions if applicable
        if (this.monitoredUnionService.isMonitored(data.unionId)) {
            const monitoredDetails = `Áé©ÂÆ∂ **${data.userName}** (ID: \`${data.userId}\`) ËÅ∑‰ΩçËÆäÊõ¥ÔºåÂéüËÅ∑‰ΩçÔºö${data.oldTitle || 'ÊàêÂì°'} -> Êñ∞ËÅ∑‰ΩçÔºö${data.newTitle || 'ÊàêÂì°'}`;
            this.monitoredUnionService.dispatchActivityEvent(
                data.unionId,
                data.unionName,
                'ËÅ∑‰ΩçËÆäÂãï',
                monitoredDetails,
                new Date()
            )
        }
    }
}